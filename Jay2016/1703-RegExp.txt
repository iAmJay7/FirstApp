Regular Expression - RegExp object
==================================

What is "Regular Expression?"

  It is a mathemtical approch to search (find), replace, or delete the text (string) based upon the given pattern and/or   value/data.

  The REgular Expression is a tool which is exposed via API in various environment( libraries).


  In JavaScript, we can creates an object of RegExp by the pair of / (forward slash).

  e.g
  
   var reg = /-here-goes-pattern-/;

Pattern and character classes

  To for a patten, we need to use following characters - known as char classes.


Char class	Meaning
-----------------------
 .		It matches any char 
 \d		It matches a digit
 \D		It matches a non-digit
 \w		It matches a word char (a-z A-Z and 0-9)
 \W		It matches a non-word char
 \s		It matches a whitespace
 \S		It matches a non-whitespace
 [set]		It matches a char from the given set.
		[pqr] - matches either p or q or r
		[a-z]	
		[a-zA-Z0-9#@!]
 (group)	Matches a group. 
		( (grp1) | (grp2) ) - Matches any of the group.
		( red|blue|green )

Quantifiers - describes the occurance of pattern or char classes

  X?		Zero or one  e.g   \d?  - a digit or not
  X*		Zero or more	   \d*  - no or one or more digits
  X+		One or more	    \d+ - one or more
  X{n}		Exact n occurences \d{6} - six digit
  X{n,n}	Min "n" and max "m" \d{2,5} - 00 to 99999
 
Boundary marker

   ^		Begins of the pattern
   $		End of the pattern


Example: Type at console

>/\d\s\d/.test('1 1')
>/\d\s\d/.test('the1 212323')
>/\d\s\d?/.test('1 ')
>/\d\s\d/.test('1 34')

>/red/.test('The red sun')
>/\d{6}/.test('12345') 

Example:

var reg = /(red|blue|green)/;
var str = prompt('Enter color name ');
if( reg.test(str) ) {
   alert('Correct!!!!');
} else {
   alert('Wrong selection');
}


Example:  A set - allows only alphabets and spaces into person name.

var reg = /[a-zA-Z ]+/;
var str = 'Rajest Shah';
console.log( reg.test( str ) ); // true

Example: Always use boundary marker when you wish to compare exact pattern for a word or statement.

var reg = /^[a-zA-Z ]{5,100}$/;
console.log( reg.test('Mr. Rajesh') ); //false
console.log( reg.test('ajh') ); //false
console.log( reg.test('Shah Rajesh') ); //true

Example: Email    -- xx.xx.xx...@xx.xx.xx...xx

var reg = /^\w+([.]\w+)+[@]\w+([.]\w+)+$/;
console.log( reg.test( 'aa.@.com' ) ); //false
console.log( reg.test( 'aa.aa@ee.com' ) ); //true
console.log( reg.test( 'aa.ee.rr.rr@rt.com.ee.rr' ) ); //true
console.log( reg.test( '11@99.com.33' ) ); //false


Example:  string's split()

>str="11,22,33,55*77*44,55|55|33,33,44|66"

>str.split(/[,|*]/)

Example: string's replace( reg, replace_str)

>str = "the PRE sun and red rose"
>
str = str.replace(/r.d/,'PRE')

Example : RegExp's exec() returns an object or null

>str = "The red sun and red rose";
>reg = /red/;
>result = reg.exec( str )

while( reg.exec( str ) ) {
  str = str.replace(reg,"white");
}


Example: working with group name (predefined names) - $1, $2,....

str = "Rajesh Patel";  //exchange the first and second words
reg = "/(\w+)\s(\w+)/;
str = str.replace( reg , "$2 $1" );

 


